# see: https://developpaper.com/debugging-nginx-with-docker/
# see: https://nginx.org/en/docs/ngx_core_module.html#error_log
error_log stderr error;

events {
  worker_connections  1024;
}

http {
    # see:
    # https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms

    # when running on docker-compose:
    # see: https://stackoverflow.com/questions/57937222/502-bad-gateway-nginx-no-resolver-defined-to-resolve
    resolver 127.0.0.11 1.1.1.1 8.8.8.8;

    upstream upstream_router {
        # in prod only work via unix sockets
        server unix:/opt/moonspeak/unixsock/router.sock;
        # in dev allow .test domain, since .test is not a valid TLD its ok
        server router.moonspeak.test backup;
    }

    # conditional redirect to HTTPS
    # if ".test" - dont force HTTPS
    # if already https - dont force HTTPS
    # for prod should redirect valid domains to HTTPS
    map "$scheme:$host" $forcehttps {
        "~*^http:.*[.]test$"  0;
        "~*^https:"           0;
        "~*^http:"            1;
    }

    #====================================
    server {
        server_name "~^.+[.](?P<domain>.+)$";
        listen      0.0.0.0:80 default_server;

        if ($forcehttps) {
            # right now we check this for every request :(
            return 307 https://$host$request_uri;
        }

        # SSL start
        # when running in docker-compose in production bind mount certificates
        listen      0.0.0.0:443 ssl default_server;
        ssl_certificate fullchain.pem;
        ssl_certificate_key privkey.pem;
        # SSL end

        # Pass the original header + port,
        # so router service can set the <base> tag including the port
        proxy_set_header Host    $host:$proxy_port;

        # handle redirects that use Location:
        # take part 0 of domain name, before first DOT, and add it as first part of PATH
        # then add the path as-is
        # note: we can not use "$domain" because "$" is interpreted as end of regex
        proxy_redirect ~*http://([^.]+)[.]moonspeak[.][a-z]+/(.+)$ /$1/$2;

        #==============================
        # deploy needs direct access to user's connection for request limiting
        location /deploy/ {
            return 307 http://deploy.moonspeak.$domain$request_uri;
        }

        #==============================
        # landing page
        location = / {
            proxy_pass http://upstream_router/router/node/landing;
        }

        location /landing/ {
            proxy_pass http://upstream_router/router/node$request_uri;
        }

        #==============================
        # features
        location /plugins/ {
            # repeat "plugins" twice, first = service dns name, second = folder name
            proxy_pass http://upstream_router/router/node/plugins$request_uri;
        }

        location /suggestions/ {
            proxy_pass http://upstream_router/router/node$request_uri;
        }

        location /synonyms/ {
            proxy_pass http://upstream_router/router/node$request_uri;
        }

        location /plus/ {
            proxy_pass http://upstream_router/router/node$request_uri;
        }

        #==============================
        # dynamic routes
        location /router/ {
            proxy_pass http://upstream_router$request_uri;
        }
    }
}
