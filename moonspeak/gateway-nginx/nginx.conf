error_log /dev/stderr error;

events {
  worker_connections  1024;
}

http {
    access_log /dev/stdout combined;

    # when running on docker-compose:
    # see: https://stackoverflow.com/questions/57937222/502-bad-gateway-nginx-no-resolver-defined-to-resolve
    resolver 127.0.0.11 1.1.1.1 8.8.8.8;

    # configure log format for storing CSP violation reports, see the below info sec config
    log_format reportcsp escape=none "CSP violation report: $request_body";

    server {
        # this is only activated on prod
        # there we docker forward port 80 -> 8443
        # and this forces all http to https
        listen 0.0.0.0:8443;
        server_name _;
        return 307 https://$host$request_uri;
    }

    #====================================
    server {
        server_name "~^.+[.](?P<domain>.+)$";
        listen      0.0.0.0:80 default_server;

        # SSL start
        # when running in docker-compose in production bind mount certificates
        listen      0.0.0.0:443 ssl default_server;
        ssl_certificate fullchain.pem;
        ssl_certificate_key privkey.pem;
        # SSL end

        # set $router router.moonspeak.$domain;
        set $router unix:/opt/moonspeak/unixsock/router.sock:;

        # Pass the original header + port,
        # so router service can set the <base> tag including the port
        proxy_set_header Host    $host:$proxy_port;

        # handle redirects that use Location:
        # take part 0 of domain name, before first DOT, and add it as first part of PATH
        # then add the path as-is
        # note: we can not use "$domain" because "$" is interpreted as end of regex
        proxy_redirect ~*http://([^.]+)[.]moonspeak[.][a-z]+/(.+)$ /$1/$2;

        #====================================
        # info sec config:
        # https://infosec.mozilla.org/guidelines/web_security.html

        # do not want to leak capability URLs (unique strings) via Referrer header
        # see: https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns
        proxy_hide_header "Referrer-Policy";
        add_header "Referrer-Policy" "origin";

        # only allow this site to iframe itself, prevent malicious sites from embedding this in an iframe
        proxy_hide_header "X-Frame-Options";
        add_header "X-Frame-Options" "SAMEORIGIN";

        # prevent browsers from guessing mime type
        proxy_hide_header "X-Content-Type-Options";
        add_header "X-Content-Type-Options" "nosniff";

        # CSP: allow iframes for this site only, all resources are loaded from our website only, set report url
        set $CSP "report-uri https://moonspeak.$domain/reportcsp";
        set $CSP "${CSP}; frame-ancestors 'self'";
        set $CSP "${CSP}; default-src 'self'";
        add_header "Content-Security-Policy-Report-Only" $CSP;

        #==============================
        # store CSP violation reports
        location /reportcsp {
            # nginx does not read body of request unless its used somewhere, so must do a dummy proxy_pass to itself
            # see: https://stackoverflow.com/questions/4939382/logging-post-data-from-request-body
            access_log /dev/stdout reportcsp;
            proxy_pass $scheme://127.0.0.1/reportcsp/dummy;
        }

        location /reportcsp/dummy {
            access_log off;
            return 200;
        }

        #==============================
        # deploy needs direct access to user's connection for request limiting
        location /deploy/ {
            return 307 http://deploy.moonspeak.$domain$request_uri;
        }

        #==============================
        # landing page
        location = / {
            # speed hack: we know the insides of landing service and want
            # to avoid two 307 redirects, so force add the language parameter now
            proxy_pass http://$router/router/node/landing/$domain/;
        }

        location /landing/ {
            proxy_pass http://$router/router/node$request_uri;
        }

        #==============================
        # features
        location /suggestions/ {
            proxy_pass http://$router/router/node$request_uri;
        }

        location /synonyms/ {
            proxy_pass http://$router/router/node$request_uri;
        }

        location /plus/ {
            proxy_pass http://$router/router/node$request_uri;
        }

        #==============================
        # dynamic routes
        location /router/ {
            proxy_pass http://$router$request_uri;
        }

        #==============================
        # any routes not mentioned are 404 and ignored
        location / {
            access_log off;
            return 404;
        }
    }
}
